
LCD16x2_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000196c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001b3c  08001b3c  00011b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b94  08001b94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001b94  08001b94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b94  08001b94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b94  08001b94  00011b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b98  08001b98  00011b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08001c0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08001c0c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008464  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001565  00000000  00000000  00028504  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  00029a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b8b  00000000  00000000  0002aa48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070cb  00000000  00000000  0004c5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ced32  00000000  00000000  0005369e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001223d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002414  00000000  00000000  0012244c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001b24 	.word	0x08001b24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08001b24 	.word	0x08001b24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
LCD16x2_CfgType LCD16x2_CfgParam;
GPIO_InitTypeDef LCD_GPIO;
void Error_Handler(void);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0

  HAL_Init();
 80002b6:	f000 fb69 	bl	800098c <HAL_Init>
  timer_delay_init();
 80002ba:	f000 ff93 	bl	80011e4 <timer_delay_init>
  LCD16x2_Config();
 80002be:	f000 f873 	bl	80003a8 <LCD16x2_Config>
  LCD_init(&LCD16x2_CfgParam);
 80002c2:	4835      	ldr	r0, [pc, #212]	; (8000398 <main+0xe8>)
 80002c4:	f000 f9ab 	bl	800061e <LCD_init>
  LCD_clear(&LCD16x2_CfgParam);
 80002c8:	4833      	ldr	r0, [pc, #204]	; (8000398 <main+0xe8>)
 80002ca:	f000 fa66 	bl	800079a <LCD_clear>


  LCD_write_char(&LCD16x2_CfgParam, 'A');
 80002ce:	2141      	movs	r1, #65	; 0x41
 80002d0:	4831      	ldr	r0, [pc, #196]	; (8000398 <main+0xe8>)
 80002d2:	f000 f9e5 	bl	80006a0 <LCD_write_char>
  LCD_write_char(&LCD16x2_CfgParam, '5');
 80002d6:	2135      	movs	r1, #53	; 0x35
 80002d8:	482f      	ldr	r0, [pc, #188]	; (8000398 <main+0xe8>)
 80002da:	f000 f9e1 	bl	80006a0 <LCD_write_char>


  LCD_write_string(&LCD16x2_CfgParam,"Prueba");
 80002de:	492f      	ldr	r1, [pc, #188]	; (800039c <main+0xec>)
 80002e0:	482d      	ldr	r0, [pc, #180]	; (8000398 <main+0xe8>)
 80002e2:	f000 faba 	bl	800085a <LCD_write_string>
  LCD_set_cursor(&LCD16x2_CfgParam, 5, 2);
 80002e6:	2202      	movs	r2, #2
 80002e8:	2105      	movs	r1, #5
 80002ea:	482b      	ldr	r0, [pc, #172]	; (8000398 <main+0xe8>)
 80002ec:	f000 fa68 	bl	80007c0 <LCD_set_cursor>
  LCD_write_char(&LCD16x2_CfgParam, 'H');
 80002f0:	2148      	movs	r1, #72	; 0x48
 80002f2:	4829      	ldr	r0, [pc, #164]	; (8000398 <main+0xe8>)
 80002f4:	f000 f9d4 	bl	80006a0 <LCD_write_char>
  LCD_clear(&LCD16x2_CfgParam);
 80002f8:	4827      	ldr	r0, [pc, #156]	; (8000398 <main+0xe8>)
 80002fa:	f000 fa4e 	bl	800079a <LCD_clear>

  char string[15];
  uint8_t num = 7;
 80002fe:	2307      	movs	r3, #7
 8000300:	73fb      	strb	r3, [r7, #15]
  snprintf(string,15, "Prueba %u", num);
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	4638      	mov	r0, r7
 8000306:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <main+0xf0>)
 8000308:	210f      	movs	r1, #15
 800030a:	f000 fff1 	bl	80012f0 <sniprintf>
  LCD_write_string(&LCD16x2_CfgParam,string);
 800030e:	463b      	mov	r3, r7
 8000310:	4619      	mov	r1, r3
 8000312:	4821      	ldr	r0, [pc, #132]	; (8000398 <main+0xe8>)
 8000314:	f000 faa1 	bl	800085a <LCD_write_string>

  LCD_clear(&LCD16x2_CfgParam);
 8000318:	481f      	ldr	r0, [pc, #124]	; (8000398 <main+0xe8>)
 800031a:	f000 fa3e 	bl	800079a <LCD_clear>
  LCD_write_string(&LCD16x2_CfgParam,"Marina apesta");
 800031e:	4921      	ldr	r1, [pc, #132]	; (80003a4 <main+0xf4>)
 8000320:	481d      	ldr	r0, [pc, #116]	; (8000398 <main+0xe8>)
 8000322:	f000 fa9a 	bl	800085a <LCD_write_string>

  while (1)
  {


	  LCD_SR(&LCD16x2_CfgParam);
 8000326:	481c      	ldr	r0, [pc, #112]	; (8000398 <main+0xe8>)
 8000328:	f000 fac7 	bl	80008ba <LCD_SR>
	  HAL_Delay(500);
 800032c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000330:	f000 fb9e 	bl	8000a70 <HAL_Delay>
	  LCD_SR(&LCD16x2_CfgParam);
 8000334:	4818      	ldr	r0, [pc, #96]	; (8000398 <main+0xe8>)
 8000336:	f000 fac0 	bl	80008ba <LCD_SR>
	  HAL_Delay(500);
 800033a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033e:	f000 fb97 	bl	8000a70 <HAL_Delay>
	  LCD_SR(&LCD16x2_CfgParam);
 8000342:	4815      	ldr	r0, [pc, #84]	; (8000398 <main+0xe8>)
 8000344:	f000 fab9 	bl	80008ba <LCD_SR>
	  HAL_Delay(500);
 8000348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034c:	f000 fb90 	bl	8000a70 <HAL_Delay>
	  LCD_SR(&LCD16x2_CfgParam);
 8000350:	4811      	ldr	r0, [pc, #68]	; (8000398 <main+0xe8>)
 8000352:	f000 fab2 	bl	80008ba <LCD_SR>
	  HAL_Delay(500);
 8000356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035a:	f000 fb89 	bl	8000a70 <HAL_Delay>

	  LCD_SL(&LCD16x2_CfgParam);
 800035e:	480e      	ldr	r0, [pc, #56]	; (8000398 <main+0xe8>)
 8000360:	f000 fa98 	bl	8000894 <LCD_SL>
	  HAL_Delay(500);
 8000364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000368:	f000 fb82 	bl	8000a70 <HAL_Delay>
	  LCD_SL(&LCD16x2_CfgParam);
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <main+0xe8>)
 800036e:	f000 fa91 	bl	8000894 <LCD_SL>
	  HAL_Delay(500);
 8000372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000376:	f000 fb7b 	bl	8000a70 <HAL_Delay>
	  LCD_SL(&LCD16x2_CfgParam);
 800037a:	4807      	ldr	r0, [pc, #28]	; (8000398 <main+0xe8>)
 800037c:	f000 fa8a 	bl	8000894 <LCD_SL>
	  HAL_Delay(500);
 8000380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000384:	f000 fb74 	bl	8000a70 <HAL_Delay>
	  LCD_SL(&LCD16x2_CfgParam);
 8000388:	4803      	ldr	r0, [pc, #12]	; (8000398 <main+0xe8>)
 800038a:	f000 fa83 	bl	8000894 <LCD_SL>
	  HAL_Delay(500);
 800038e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000392:	f000 fb6d 	bl	8000a70 <HAL_Delay>
	  LCD_SR(&LCD16x2_CfgParam);
 8000396:	e7c6      	b.n	8000326 <main+0x76>
 8000398:	200000ac 	.word	0x200000ac
 800039c:	08001b3c 	.word	0x08001b3c
 80003a0:	08001b44 	.word	0x08001b44
 80003a4:	08001b50 	.word	0x08001b50

080003a8 <LCD16x2_Config>:

}



void LCD16x2_Config(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

	LCD16x2_CfgParam.LCD_GPIO = GPIOB;
 80003ae:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <LCD16x2_Config+0xc0>)
 80003b0:	4a2e      	ldr	r2, [pc, #184]	; (800046c <LCD16x2_Config+0xc4>)
 80003b2:	601a      	str	r2, [r3, #0]

	LCD16x2_CfgParam.D7_PIN = GPIO_PIN_13;
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <LCD16x2_Config+0xc0>)
 80003b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ba:	81da      	strh	r2, [r3, #14]
	LCD16x2_CfgParam.D6_PIN = GPIO_PIN_5;
 80003bc:	4b2a      	ldr	r3, [pc, #168]	; (8000468 <LCD16x2_Config+0xc0>)
 80003be:	2220      	movs	r2, #32
 80003c0:	819a      	strh	r2, [r3, #12]
	LCD16x2_CfgParam.D5_PIN = GPIO_PIN_4;
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <LCD16x2_Config+0xc0>)
 80003c4:	2210      	movs	r2, #16
 80003c6:	815a      	strh	r2, [r3, #10]
	LCD16x2_CfgParam.D4_PIN = GPIO_PIN_10;
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <LCD16x2_Config+0xc0>)
 80003ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ce:	811a      	strh	r2, [r3, #8]

	LCD16x2_CfgParam.EN_PIN = GPIO_PIN_14;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <LCD16x2_Config+0xc0>)
 80003d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003d6:	821a      	strh	r2, [r3, #16]
	LCD16x2_CfgParam.RS_PIN = GPIO_PIN_1;
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <LCD16x2_Config+0xc0>)
 80003da:	2202      	movs	r2, #2
 80003dc:	829a      	strh	r2, [r3, #20]
	LCD16x2_CfgParam.RW_PIN = GPIO_PIN_15;
 80003de:	4b22      	ldr	r3, [pc, #136]	; (8000468 <LCD16x2_Config+0xc0>)
 80003e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003e4:	825a      	strh	r2, [r3, #18]

	LCD16x2_CfgParam.LCD_EN_Delay = 40;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <LCD16x2_Config+0xc0>)
 80003e8:	2228      	movs	r2, #40	; 0x28
 80003ea:	82da      	strh	r2, [r3, #22]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	2300      	movs	r3, #0
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <LCD16x2_Config+0xc8>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <LCD16x2_Config+0xc8>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
 80003fc:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <LCD16x2_Config+0xc8>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	f003 0302 	and.w	r3, r3, #2
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]


	LCD_GPIO.Pin = LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.D6_PIN | LCD16x2_CfgParam.D5_PIN | LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.EN_PIN | LCD16x2_CfgParam.RS_PIN | LCD16x2_CfgParam.RW_PIN;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <LCD16x2_Config+0xc0>)
 800040a:	89da      	ldrh	r2, [r3, #14]
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <LCD16x2_Config+0xc0>)
 800040e:	899b      	ldrh	r3, [r3, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <LCD16x2_Config+0xc0>)
 8000416:	895b      	ldrh	r3, [r3, #10]
 8000418:	4313      	orrs	r3, r2
 800041a:	b29a      	uxth	r2, r3
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <LCD16x2_Config+0xc0>)
 800041e:	891b      	ldrh	r3, [r3, #8]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <LCD16x2_Config+0xc0>)
 8000426:	8a1b      	ldrh	r3, [r3, #16]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <LCD16x2_Config+0xc0>)
 800042e:	8a9b      	ldrh	r3, [r3, #20]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <LCD16x2_Config+0xc0>)
 8000436:	8a5b      	ldrh	r3, [r3, #18]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29b      	uxth	r3, r3
 800043c:	461a      	mov	r2, r3
 800043e:	4b0d      	ldr	r3, [pc, #52]	; (8000474 <LCD16x2_Config+0xcc>)
 8000440:	601a      	str	r2, [r3, #0]
	LCD_GPIO.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <LCD16x2_Config+0xcc>)
 8000444:	2201      	movs	r2, #1
 8000446:	605a      	str	r2, [r3, #4]
	LCD_GPIO.Pull = GPIO_NOPULL;
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <LCD16x2_Config+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
	LCD_GPIO.Speed = GPIO_SPEED_LOW;
 800044e:	4b09      	ldr	r3, [pc, #36]	; (8000474 <LCD16x2_Config+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &LCD_GPIO);
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <LCD16x2_Config+0xc0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4906      	ldr	r1, [pc, #24]	; (8000474 <LCD16x2_Config+0xcc>)
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fc10 	bl	8000c80 <HAL_GPIO_Init>


}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	200000ac 	.word	0x200000ac
 800046c:	40020400 	.word	0x40020400
 8000470:	40023800 	.word	0x40023800
 8000474:	20000098 	.word	0x20000098

08000478 <Error_Handler>:
	LED.Pin = GPIO_PIN_5;
	__HAL_RCC_GPIOA_CLK_ENABLE();
	HAL_GPIO_Init(GPIOA, &LED);
}

void Error_Handler(void){
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <HAL_MspInit+0x4c>)
 8000494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000496:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <HAL_MspInit+0x4c>)
 8000498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049c:	6453      	str	r3, [r2, #68]	; 0x44
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <HAL_MspInit+0x4c>)
 80004a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	2300      	movs	r3, #0
 80004ac:	603b      	str	r3, [r7, #0]
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_MspInit+0x4c>)
 80004b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_MspInit+0x4c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	6413      	str	r3, [r2, #64]	; 0x40
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_MspInit+0x4c>)
 80004bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004c6:	2007      	movs	r0, #7
 80004c8:	f000 fba6 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40023800 	.word	0x40023800

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052c:	f000 fa80 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <_sbrk+0x5c>)
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <_sbrk+0x60>)
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d102      	bne.n	8000556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x64>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <_sbrk+0x68>)
 8000554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	429a      	cmp	r2, r3
 8000562:	d207      	bcs.n	8000574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000564:	f000 fe9a 	bl	800129c <__errno>
 8000568:	4602      	mov	r2, r0
 800056a:	230c      	movs	r3, #12
 800056c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	e009      	b.n	8000588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <_sbrk+0x64>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4413      	add	r3, r2
 8000582:	4a05      	ldr	r2, [pc, #20]	; (8000598 <_sbrk+0x64>)
 8000584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000586:	68fb      	ldr	r3, [r7, #12]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20020000 	.word	0x20020000
 8000594:	00000400 	.word	0x00000400
 8000598:	2000008c 	.word	0x2000008c
 800059c:	20000110 	.word	0x20000110

080005a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <SystemInit+0x28>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <SystemInit+0x28>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <SystemInit+0x28>)
 80005b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ba:	609a      	str	r2, [r3, #8]
#endif
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005d2:	e003      	b.n	80005dc <LoopCopyDataInit>

080005d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005da:	3104      	adds	r1, #4

080005dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005e4:	d3f6      	bcc.n	80005d4 <CopyDataInit>
  ldr  r2, =_sbss
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005e8:	e002      	b.n	80005f0 <LoopFillZerobss>

080005ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005ec:	f842 3b04 	str.w	r3, [r2], #4

080005f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005f4:	d3f9      	bcc.n	80005ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005f6:	f7ff ffd3 	bl	80005a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f000 fe55 	bl	80012a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005fe:	f7ff fe57 	bl	80002b0 <main>
  bx  lr    
 8000602:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000608:	08001b9c 	.word	0x08001b9c
  ldr  r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000610:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000614:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000618:	2000010c 	.word	0x2000010c

0800061c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>

0800061e <LCD_init>:
  * @note  Instruction macros can be modified in LCD16x2.h for any other ini configuration.
  *
  * @param  LCD16x2_CfgParam Configuration structure.
  */

void LCD_init(LCD16x2_CfgType *LCD16x2_CfgParam){
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]

	//Power on
	// WAIT 15 ms to be sure the LCD has Power on correctly
	HAL_Delay(150);
 8000626:	2096      	movs	r0, #150	; 0x96
 8000628:	f000 fa22 	bl	8000a70 <HAL_Delay>
	// Ini instruction as given in datasheet
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_ini);
 800062c:	2103      	movs	r1, #3
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f88d 	bl	800074e <LCD_cmd>
	HAL_Delay(5);
 8000634:	2005      	movs	r0, #5
 8000636:	f000 fa1b 	bl	8000a70 <HAL_Delay>
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_ini);
 800063a:	2103      	movs	r1, #3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f886 	bl	800074e <LCD_cmd>
	delay_us(150);
 8000642:	2096      	movs	r0, #150	; 0x96
 8000644:	f000 fe10 	bl	8001268 <delay_us>
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_ini);
 8000648:	2103      	movs	r1, #3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f87f 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_4bits);
 8000650:	2102      	movs	r1, #2
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f87b 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_lines_font_1);
 8000658:	2102      	movs	r1, #2
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f877 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_fun_set_lines_font_2);
 8000660:	2108      	movs	r1, #8
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f873 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_off_1);
 8000668:	2100      	movs	r1, #0
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f86f 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_off_2);
 8000670:	210c      	movs	r1, #12
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f86b 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_clr_1);
 8000678:	2100      	movs	r1, #0
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f867 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_clr_2);
 8000680:	2101      	movs	r1, #1
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f863 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_mode_set_1);
 8000688:	2100      	movs	r1, #0
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f85f 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_mode_set_2);
 8000690:	2103      	movs	r1, #3
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f85b 	bl	800074e <LCD_cmd>

}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <LCD_write_char>:
void LCD_write_char(LCD16x2_CfgType *LCD16x2_CfgParam, char Data){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]

	// Divide the 8 bit caracteres in two 2 bits
	uint8_t LowNibble, HighNibble;

	LowNibble = Data&0x0F;
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	73fb      	strb	r3, [r7, #15]
	HighNibble = Data&0xF0;
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	f023 030f 	bic.w	r3, r3, #15
 80006ba:	73bb      	strb	r3, [r7, #14]
	HighNibble = (HighNibble>>4);
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	091b      	lsrs	r3, r3, #4
 80006c0:	73bb      	strb	r3, [r7, #14]

	uint8_t address = 0b100000; //Used to complete instruction to 6bits
 80006c2:	2320      	movs	r3, #32
 80006c4:	737b      	strb	r3, [r7, #13]

	LowNibble |= address;
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	73fb      	strb	r3, [r7, #15]
	HighNibble |= address;
 80006ce:	7bba      	ldrb	r2, [r7, #14]
 80006d0:	7b7b      	ldrb	r3, [r7, #13]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	73bb      	strb	r3, [r7, #14]

	LCD_pin_set(LCD16x2_CfgParam, HighNibble);
 80006d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006da:	4619      	mov	r1, r3
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f8ff 	bl	80008e0 <LCD_pin_set>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN, 1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6818      	ldr	r0, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	8a1b      	ldrh	r3, [r3, #16]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4619      	mov	r1, r3
 80006ee:	f000 fc59 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 80006f2:	203c      	movs	r0, #60	; 0x3c
 80006f4:	f000 fdb8 	bl	8001268 <delay_us>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN,0);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	8a1b      	ldrh	r3, [r3, #16]
 8000700:	2200      	movs	r2, #0
 8000702:	4619      	mov	r1, r3
 8000704:	f000 fc4e 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 8000708:	203c      	movs	r0, #60	; 0x3c
 800070a:	f000 fdad 	bl	8001268 <delay_us>
	LCD_pin_set(LCD16x2_CfgParam, LowNibble);
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f8e3 	bl	80008e0 <LCD_pin_set>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN, 1);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	8a1b      	ldrh	r3, [r3, #16]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f000 fc3d 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 800072a:	203c      	movs	r0, #60	; 0x3c
 800072c:	f000 fd9c 	bl	8001268 <delay_us>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN, 0);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8a1b      	ldrh	r3, [r3, #16]
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f000 fc32 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 8000740:	203c      	movs	r0, #60	; 0x3c
 8000742:	f000 fd91 	bl	8001268 <delay_us>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <LCD_cmd>:
void LCD_cmd(LCD16x2_CfgType *LCD16x2_CfgParam, uint8_t Inst){
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
 8000756:	460b      	mov	r3, r1
 8000758:	70fb      	strb	r3, [r7, #3]

	LCD_pin_set(LCD16x2_CfgParam, Inst);
 800075a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800075e:	4619      	mov	r1, r3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bd 	bl	80008e0 <LCD_pin_set>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN, 1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	8a1b      	ldrh	r3, [r3, #16]
 800076e:	2201      	movs	r2, #1
 8000770:	4619      	mov	r1, r3
 8000772:	f000 fc17 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 8000776:	203c      	movs	r0, #60	; 0x3c
 8000778:	f000 fd76 	bl	8001268 <delay_us>
	HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO, LCD16x2_CfgParam->EN_PIN,0);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8a1b      	ldrh	r3, [r3, #16]
 8000784:	2200      	movs	r2, #0
 8000786:	4619      	mov	r1, r3
 8000788:	f000 fc0c 	bl	8000fa4 <HAL_GPIO_WritePin>
	delay_us(60);
 800078c:	203c      	movs	r0, #60	; 0x3c
 800078e:	f000 fd6b 	bl	8001268 <delay_us>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <LCD_clear>:
  * @param  LCD16x2_CfgParam Configuration structure.
  *
  * @param Instr_Code instruction code for LCD.
  *
  */
void LCD_clear(LCD16x2_CfgType *LCD16x2_CfgParam){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_clr_1);
 80007a2:	2100      	movs	r1, #0
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffd2 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LCD_dp_clr_2);
 80007aa:	2101      	movs	r1, #1
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ffce 	bl	800074e <LCD_cmd>
	HAL_Delay(2);
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 f95c 	bl	8000a70 <HAL_Delay>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <LCD_set_cursor>:

void LCD_set_cursor(LCD16x2_CfgType *LCD16x2_CfgParam, uint8_t column, uint8_t row){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
 80007cc:	4613      	mov	r3, r2
 80007ce:	70bb      	strb	r3, [r7, #2]
	// TODO idear la función para que el High nibble tenga la dirección y el low nibble tambien
	// Tengo que mandar 0 0 1   ADR ADR ADR High Nibble
	// y				0 0 ADR ADR ADR ADR Low Nibble
	// ADR empieza en va de 00 a 0F para la primera fila y de 40 a 4F para la segunda fila
	uint8_t LowNibble, HighNibble;
	int8_t addr =0 ; // Base address for DDRAM is 0b1000 0000
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]

if (row ==1 ){
 80007d4:	78bb      	ldrb	r3, [r7, #2]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d11a      	bne.n	8000810 <LCD_set_cursor+0x50>

	addr =  0x80+column-1;          // Example: Column 5 addr is 0x04 -> 0b1000 0000+0101-0001 = 0b1000 0100
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	337f      	adds	r3, #127	; 0x7f
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	73fb      	strb	r3, [r7, #15]

	LowNibble = addr&0x0F;			// would be 0000 ADR ADR ADR ADR (0000 0100 in the example)
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	f003 030f 	and.w	r3, r3, #15
 80007e8:	73bb      	strb	r3, [r7, #14]
	HighNibble = (addr>>4);			// would be  0000 1	 ADR ADR ADR (0000 1000 in the example)
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	111b      	asrs	r3, r3, #4
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	737b      	strb	r3, [r7, #13]
	HighNibble &= 0x0F;
 80007f4:	7b7b      	ldrb	r3, [r7, #13]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	737b      	strb	r3, [r7, #13]
	/*No need for more changes because RS and RW stay at 0*/
	LCD_cmd(LCD16x2_CfgParam, HighNibble);
 80007fc:	7b7b      	ldrb	r3, [r7, #13]
 80007fe:	4619      	mov	r1, r3
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ffa4 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LowNibble);
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff9f 	bl	800074e <LCD_cmd>
}
if (row == 2){
 8000810:	78bb      	ldrb	r3, [r7, #2]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d11a      	bne.n	800084c <LCD_set_cursor+0x8c>

	addr = 0x80+0x40+column-1;			// Example: Column 5 addr is 0x44 -> 0b1000 0000 + 0b0100+0101 -0001 = 0b1100 0100
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	3b41      	subs	r3, #65	; 0x41
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]

	LowNibble = addr&0x0F;				// would be 0000 ADR ADR ADR ADR (0000 0100 in the example)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	73bb      	strb	r3, [r7, #14]
	HighNibble = (addr>>4);				// would be  0000 1	 ADR ADR ADR (0000 1100 in the example)
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	111b      	asrs	r3, r3, #4
 800082c:	b25b      	sxtb	r3, r3
 800082e:	737b      	strb	r3, [r7, #13]
	HighNibble &= 0x0F;					// To be sure RS and RW are 0 even with signal extension
 8000830:	7b7b      	ldrb	r3, [r7, #13]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	737b      	strb	r3, [r7, #13]

	/*No need for more changes because RS and RW stay at 0*/
	LCD_cmd(LCD16x2_CfgParam, HighNibble);
 8000838:	7b7b      	ldrb	r3, [r7, #13]
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ff86 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, LowNibble);
 8000842:	7bbb      	ldrb	r3, [r7, #14]
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ff81 	bl	800074e <LCD_cmd>
}
delay_us(40);  //This operation has a delay given in the datasheet.
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fd0b 	bl	8001268 <delay_us>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LCD_write_string>:
void LCD_write_string(LCD16x2_CfgType *LCD16x2_CfgParam, char *string){
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]

	for (int i = 0; string[i]!= '\0'; i++){
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e00a      	b.n	8000880 <LCD_write_string+0x26>
		LCD_write_char(LCD16x2_CfgParam, string[i]);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff13 	bl	80006a0 <LCD_write_char>
	for (int i = 0; string[i]!= '\0'; i++){
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	3301      	adds	r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1ee      	bne.n	800086a <LCD_write_string+0x10>
	}

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <LCD_SL>:

void LCD_SL(LCD16x2_CfgType *LCD16x2_CfgParam){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	//    RS RW DB7 DB6 DB5 DB4 BD3 DB2 DB1 DB0
	// 0b 0   0  0   0   0   1   1   0   *    *
	// High Nibble -> 0001
	// Low Nibble  -> 1000

	LCD_cmd(LCD16x2_CfgParam, 0x01);
 800089c:	2101      	movs	r1, #1
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff55 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, 0x08);
 80008a4:	2108      	movs	r1, #8
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff ff51 	bl	800074e <LCD_cmd>
	delay_us(60);
 80008ac:	203c      	movs	r0, #60	; 0x3c
 80008ae:	f000 fcdb 	bl	8001268 <delay_us>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <LCD_SR>:

void LCD_SR(LCD16x2_CfgType *LCD16x2_CfgParam){
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	//    RS RW DB7 DB6 DB5 DB4 BD3 DB2 DB1 DB0
	// 0b 0   0  0   0   0   1   1   1   *    *
	// High Nibble -> 0001
	// Low Nibble  -> 1100

	LCD_cmd(LCD16x2_CfgParam, 0x01);
 80008c2:	2101      	movs	r1, #1
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff42 	bl	800074e <LCD_cmd>
	LCD_cmd(LCD16x2_CfgParam, 0x0C);
 80008ca:	210c      	movs	r1, #12
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff3e 	bl	800074e <LCD_cmd>
	delay_us(60);
 80008d2:	203c      	movs	r0, #60	; 0x3c
 80008d4:	f000 fcc8 	bl	8001268 <delay_us>

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <LCD_pin_set>:



static void LCD_pin_set(LCD16x2_CfgType *LCD16x2_CfgParam, int8_t Instr_Code){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->RS_PIN, ((Instr_Code)&(1<<5))>>5);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	8a99      	ldrh	r1, [r3, #20]
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	115b      	asrs	r3, r3, #5
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	f000 fb4f 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->RW_PIN, ((Instr_Code)&(1<<4))>>4);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	8a59      	ldrh	r1, [r3, #18]
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	111b      	asrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	f000 fb42 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->D7_PIN, ((Instr_Code)&(1<<3))>>3);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	89d9      	ldrh	r1, [r3, #14]
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	10db      	asrs	r3, r3, #3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	f000 fb35 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->D6_PIN, ((Instr_Code)&(1<<2))>>2);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	8999      	ldrh	r1, [r3, #12]
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	109b      	asrs	r3, r3, #2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	f000 fb28 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->D5_PIN, ((Instr_Code)&(1<<1))>>1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	8959      	ldrh	r1, [r3, #10]
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	105b      	asrs	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f000 fb1b 	bl	8000fa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD16x2_CfgParam->LCD_GPIO,LCD16x2_CfgParam->D4_PIN, (Instr_Code)&(1));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	8919      	ldrh	r1, [r3, #8]
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	f000 fb10 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_Init+0x40>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_Init+0x40>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x40>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f92f 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fd62 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023c00 	.word	0x40023c00

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f939 	bl	8000c66 <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f90f 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200000c4 	.word	0x200000c4

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000c4 	.word	0x200000c4

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_Delay+0x40>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffde 	bl	8000a58 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff47 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff5c 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffb0 	bl	8000bd4 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e165      	b.n	8000f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8154 	bne.w	8000f62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d00b      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cce:	2b11      	cmp	r3, #17
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0xfc>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b12      	cmp	r3, #18
 8000d7a:	d123      	bne.n	8000dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0203 	and.w	r2, r3, #3
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80ae 	beq.w	8000f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x2fc>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a5b      	ldr	r2, [pc, #364]	; (8000f7c <HAL_GPIO_Init+0x2fc>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <HAL_GPIO_Init+0x2fc>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a57      	ldr	r2, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_GPIO_Init+0x304>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d025      	beq.n	8000e9a <HAL_GPIO_Init+0x21a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_GPIO_Init+0x308>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d01f      	beq.n	8000e96 <HAL_GPIO_Init+0x216>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_GPIO_Init+0x30c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d019      	beq.n	8000e92 <HAL_GPIO_Init+0x212>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <HAL_GPIO_Init+0x310>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d013      	beq.n	8000e8e <HAL_GPIO_Init+0x20e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x314>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00d      	beq.n	8000e8a <HAL_GPIO_Init+0x20a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x318>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x206>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x31c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d101      	bne.n	8000e82 <HAL_GPIO_Init+0x202>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00c      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e82:	2307      	movs	r3, #7
 8000e84:	e00a      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x21c>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4934      	ldr	r1, [pc, #208]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ede:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f5c:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_GPIO_Init+0x320>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f ae96 	bls.w	8000c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	3724      	adds	r7, #36	; 0x24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_RCC_GetHCLKFreq+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e01d      	b.n	800103e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d106      	bne.n	800101c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f815 	bl	8001046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f000 f838 	bl	80010a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b06      	cmp	r3, #6
 800107a:	d007      	beq.n	800108c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a40      	ldr	r2, [pc, #256]	; (80011b8 <TIM_Base_SetConfig+0x114>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d013      	beq.n	80010e4 <TIM_Base_SetConfig+0x40>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c2:	d00f      	beq.n	80010e4 <TIM_Base_SetConfig+0x40>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <TIM_Base_SetConfig+0x118>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d00b      	beq.n	80010e4 <TIM_Base_SetConfig+0x40>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <TIM_Base_SetConfig+0x11c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d007      	beq.n	80010e4 <TIM_Base_SetConfig+0x40>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a3b      	ldr	r2, [pc, #236]	; (80011c4 <TIM_Base_SetConfig+0x120>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d003      	beq.n	80010e4 <TIM_Base_SetConfig+0x40>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3a      	ldr	r2, [pc, #232]	; (80011c8 <TIM_Base_SetConfig+0x124>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d108      	bne.n	80010f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <TIM_Base_SetConfig+0x114>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d02b      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d027      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <TIM_Base_SetConfig+0x118>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d023      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <TIM_Base_SetConfig+0x11c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <TIM_Base_SetConfig+0x120>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01b      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <TIM_Base_SetConfig+0x124>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d017      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <TIM_Base_SetConfig+0x128>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <TIM_Base_SetConfig+0x12c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00f      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <TIM_Base_SetConfig+0x130>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00b      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <TIM_Base_SetConfig+0x134>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <TIM_Base_SetConfig+0x138>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d003      	beq.n	8001156 <TIM_Base_SetConfig+0xb2>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <TIM_Base_SetConfig+0x13c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d108      	bne.n	8001168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800115c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <TIM_Base_SetConfig+0x114>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d003      	beq.n	800119c <TIM_Base_SetConfig+0xf8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <TIM_Base_SetConfig+0x124>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d103      	bne.n	80011a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	615a      	str	r2, [r3, #20]
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40010000 	.word	0x40010000
 80011bc:	40000400 	.word	0x40000400
 80011c0:	40000800 	.word	0x40000800
 80011c4:	40000c00 	.word	0x40000c00
 80011c8:	40010400 	.word	0x40010400
 80011cc:	40014000 	.word	0x40014000
 80011d0:	40014400 	.word	0x40014400
 80011d4:	40014800 	.word	0x40014800
 80011d8:	40001800 	.word	0x40001800
 80011dc:	40001c00 	.word	0x40001c00
 80011e0:	40002000 	.word	0x40002000

080011e4 <timer_delay_init>:

#include "delay.h"
TIM_HandleTypeDef HTIMx;
uint32_t gu32_ticks = 0;

void timer_delay_init(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	uint32_t gu32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80011ea:	f7ff fef5 	bl	8000fd8 <HAL_RCC_GetHCLKFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <timer_delay_init+0x74>)
 80011f2:	fba3 2302 	umull	r2, r3, r3, r2
 80011f6:	0c9b      	lsrs	r3, r3, #18
 80011f8:	607b      	str	r3, [r7, #4]
	HTIMx.Instance = TIM6;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <timer_delay_init+0x78>)
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <timer_delay_init+0x7c>)
 80011fe:	601a      	str	r2, [r3, #0]
	HTIMx.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <timer_delay_init+0x78>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
	HTIMx.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <timer_delay_init+0x78>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
	HTIMx.Init.Prescaler = gu32_ticks-1;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <timer_delay_init+0x78>)
 8001212:	6053      	str	r3, [r2, #4]
	HTIMx.Init.Period = 0xFFFF;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <timer_delay_init+0x78>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
	__HAL_RCC_TIM6_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <timer_delay_init+0x80>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <timer_delay_init+0x80>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <timer_delay_init+0x80>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
	if (HAL_TIM_Base_Init(&HTIMx)!=HAL_OK){
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <timer_delay_init+0x78>)
 800123a:	f7ff fed9 	bl	8000ff0 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <timer_delay_init+0x64>
		Error_Handler();
 8001244:	f7ff f918 	bl	8000478 <Error_Handler>
}
	HAL_TIM_Base_Start(&HTIMx);
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <timer_delay_init+0x78>)
 800124a:	f7ff ff06 	bl	800105a <HAL_TIM_Base_Start>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	431bde83 	.word	0x431bde83
 800125c:	200000c8 	.word	0x200000c8
 8001260:	40001000 	.word	0x40001000
 8001264:	40023800 	.word	0x40023800

08001268 <delay_us>:

void delay_us(volatile uint16_t u16){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]

	HTIMx.Instance->CNT = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <delay_us+0x30>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
	while(HTIMx.Instance->CNT<=u16){
 800127a:	bf00      	nop
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <delay_us+0x30>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	b292      	uxth	r2, r2
 8001286:	4293      	cmp	r3, r2
 8001288:	d9f8      	bls.n	800127c <delay_us+0x14>

	}

}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200000c8 	.word	0x200000c8

0800129c <__errno>:
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <__errno+0x8>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <__libc_init_array>:
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	4e0d      	ldr	r6, [pc, #52]	; (80012e0 <__libc_init_array+0x38>)
 80012ac:	4c0d      	ldr	r4, [pc, #52]	; (80012e4 <__libc_init_array+0x3c>)
 80012ae:	1ba4      	subs	r4, r4, r6
 80012b0:	10a4      	asrs	r4, r4, #2
 80012b2:	2500      	movs	r5, #0
 80012b4:	42a5      	cmp	r5, r4
 80012b6:	d109      	bne.n	80012cc <__libc_init_array+0x24>
 80012b8:	4e0b      	ldr	r6, [pc, #44]	; (80012e8 <__libc_init_array+0x40>)
 80012ba:	4c0c      	ldr	r4, [pc, #48]	; (80012ec <__libc_init_array+0x44>)
 80012bc:	f000 fc32 	bl	8001b24 <_init>
 80012c0:	1ba4      	subs	r4, r4, r6
 80012c2:	10a4      	asrs	r4, r4, #2
 80012c4:	2500      	movs	r5, #0
 80012c6:	42a5      	cmp	r5, r4
 80012c8:	d105      	bne.n	80012d6 <__libc_init_array+0x2e>
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d0:	4798      	blx	r3
 80012d2:	3501      	adds	r5, #1
 80012d4:	e7ee      	b.n	80012b4 <__libc_init_array+0xc>
 80012d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012da:	4798      	blx	r3
 80012dc:	3501      	adds	r5, #1
 80012de:	e7f2      	b.n	80012c6 <__libc_init_array+0x1e>
 80012e0:	08001b94 	.word	0x08001b94
 80012e4:	08001b94 	.word	0x08001b94
 80012e8:	08001b94 	.word	0x08001b94
 80012ec:	08001b98 	.word	0x08001b98

080012f0 <sniprintf>:
 80012f0:	b40c      	push	{r2, r3}
 80012f2:	b530      	push	{r4, r5, lr}
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <sniprintf+0x64>)
 80012f6:	1e0c      	subs	r4, r1, #0
 80012f8:	b09d      	sub	sp, #116	; 0x74
 80012fa:	681d      	ldr	r5, [r3, #0]
 80012fc:	da08      	bge.n	8001310 <sniprintf+0x20>
 80012fe:	238b      	movs	r3, #139	; 0x8b
 8001300:	602b      	str	r3, [r5, #0]
 8001302:	f04f 30ff 	mov.w	r0, #4294967295
 8001306:	b01d      	add	sp, #116	; 0x74
 8001308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800130c:	b002      	add	sp, #8
 800130e:	4770      	bx	lr
 8001310:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001314:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001318:	bf14      	ite	ne
 800131a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800131e:	4623      	moveq	r3, r4
 8001320:	9304      	str	r3, [sp, #16]
 8001322:	9307      	str	r3, [sp, #28]
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	9002      	str	r0, [sp, #8]
 800132a:	9006      	str	r0, [sp, #24]
 800132c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001332:	ab21      	add	r3, sp, #132	; 0x84
 8001334:	a902      	add	r1, sp, #8
 8001336:	4628      	mov	r0, r5
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f000 f867 	bl	800140c <_svfiprintf_r>
 800133e:	1c43      	adds	r3, r0, #1
 8001340:	bfbc      	itt	lt
 8001342:	238b      	movlt	r3, #139	; 0x8b
 8001344:	602b      	strlt	r3, [r5, #0]
 8001346:	2c00      	cmp	r4, #0
 8001348:	d0dd      	beq.n	8001306 <sniprintf+0x16>
 800134a:	9b02      	ldr	r3, [sp, #8]
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e7d9      	b.n	8001306 <sniprintf+0x16>
 8001352:	bf00      	nop
 8001354:	2000000c 	.word	0x2000000c

08001358 <__ssputs_r>:
 8001358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800135c:	688e      	ldr	r6, [r1, #8]
 800135e:	429e      	cmp	r6, r3
 8001360:	4682      	mov	sl, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4690      	mov	r8, r2
 8001366:	4699      	mov	r9, r3
 8001368:	d837      	bhi.n	80013da <__ssputs_r+0x82>
 800136a:	898a      	ldrh	r2, [r1, #12]
 800136c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001370:	d031      	beq.n	80013d6 <__ssputs_r+0x7e>
 8001372:	6825      	ldr	r5, [r4, #0]
 8001374:	6909      	ldr	r1, [r1, #16]
 8001376:	1a6f      	subs	r7, r5, r1
 8001378:	6965      	ldr	r5, [r4, #20]
 800137a:	2302      	movs	r3, #2
 800137c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001380:	fb95 f5f3 	sdiv	r5, r5, r3
 8001384:	f109 0301 	add.w	r3, r9, #1
 8001388:	443b      	add	r3, r7
 800138a:	429d      	cmp	r5, r3
 800138c:	bf38      	it	cc
 800138e:	461d      	movcc	r5, r3
 8001390:	0553      	lsls	r3, r2, #21
 8001392:	d530      	bpl.n	80013f6 <__ssputs_r+0x9e>
 8001394:	4629      	mov	r1, r5
 8001396:	f000 fb2b 	bl	80019f0 <_malloc_r>
 800139a:	4606      	mov	r6, r0
 800139c:	b950      	cbnz	r0, 80013b4 <__ssputs_r+0x5c>
 800139e:	230c      	movs	r3, #12
 80013a0:	f8ca 3000 	str.w	r3, [sl]
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013aa:	81a3      	strh	r3, [r4, #12]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b4:	463a      	mov	r2, r7
 80013b6:	6921      	ldr	r1, [r4, #16]
 80013b8:	f000 faa8 	bl	800190c <memcpy>
 80013bc:	89a3      	ldrh	r3, [r4, #12]
 80013be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80013c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c6:	81a3      	strh	r3, [r4, #12]
 80013c8:	6126      	str	r6, [r4, #16]
 80013ca:	6165      	str	r5, [r4, #20]
 80013cc:	443e      	add	r6, r7
 80013ce:	1bed      	subs	r5, r5, r7
 80013d0:	6026      	str	r6, [r4, #0]
 80013d2:	60a5      	str	r5, [r4, #8]
 80013d4:	464e      	mov	r6, r9
 80013d6:	454e      	cmp	r6, r9
 80013d8:	d900      	bls.n	80013dc <__ssputs_r+0x84>
 80013da:	464e      	mov	r6, r9
 80013dc:	4632      	mov	r2, r6
 80013de:	4641      	mov	r1, r8
 80013e0:	6820      	ldr	r0, [r4, #0]
 80013e2:	f000 fa9e 	bl	8001922 <memmove>
 80013e6:	68a3      	ldr	r3, [r4, #8]
 80013e8:	1b9b      	subs	r3, r3, r6
 80013ea:	60a3      	str	r3, [r4, #8]
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	441e      	add	r6, r3
 80013f0:	6026      	str	r6, [r4, #0]
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7dc      	b.n	80013b0 <__ssputs_r+0x58>
 80013f6:	462a      	mov	r2, r5
 80013f8:	f000 fb54 	bl	8001aa4 <_realloc_r>
 80013fc:	4606      	mov	r6, r0
 80013fe:	2800      	cmp	r0, #0
 8001400:	d1e2      	bne.n	80013c8 <__ssputs_r+0x70>
 8001402:	6921      	ldr	r1, [r4, #16]
 8001404:	4650      	mov	r0, sl
 8001406:	f000 faa5 	bl	8001954 <_free_r>
 800140a:	e7c8      	b.n	800139e <__ssputs_r+0x46>

0800140c <_svfiprintf_r>:
 800140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	461d      	mov	r5, r3
 8001412:	898b      	ldrh	r3, [r1, #12]
 8001414:	061f      	lsls	r7, r3, #24
 8001416:	b09d      	sub	sp, #116	; 0x74
 8001418:	4680      	mov	r8, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4616      	mov	r6, r2
 800141e:	d50f      	bpl.n	8001440 <_svfiprintf_r+0x34>
 8001420:	690b      	ldr	r3, [r1, #16]
 8001422:	b96b      	cbnz	r3, 8001440 <_svfiprintf_r+0x34>
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	f000 fae3 	bl	80019f0 <_malloc_r>
 800142a:	6020      	str	r0, [r4, #0]
 800142c:	6120      	str	r0, [r4, #16]
 800142e:	b928      	cbnz	r0, 800143c <_svfiprintf_r+0x30>
 8001430:	230c      	movs	r3, #12
 8001432:	f8c8 3000 	str.w	r3, [r8]
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	e0c8      	b.n	80015ce <_svfiprintf_r+0x1c2>
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	6163      	str	r3, [r4, #20]
 8001440:	2300      	movs	r3, #0
 8001442:	9309      	str	r3, [sp, #36]	; 0x24
 8001444:	2320      	movs	r3, #32
 8001446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800144a:	2330      	movs	r3, #48	; 0x30
 800144c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001450:	9503      	str	r5, [sp, #12]
 8001452:	f04f 0b01 	mov.w	fp, #1
 8001456:	4637      	mov	r7, r6
 8001458:	463d      	mov	r5, r7
 800145a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800145e:	b10b      	cbz	r3, 8001464 <_svfiprintf_r+0x58>
 8001460:	2b25      	cmp	r3, #37	; 0x25
 8001462:	d13e      	bne.n	80014e2 <_svfiprintf_r+0xd6>
 8001464:	ebb7 0a06 	subs.w	sl, r7, r6
 8001468:	d00b      	beq.n	8001482 <_svfiprintf_r+0x76>
 800146a:	4653      	mov	r3, sl
 800146c:	4632      	mov	r2, r6
 800146e:	4621      	mov	r1, r4
 8001470:	4640      	mov	r0, r8
 8001472:	f7ff ff71 	bl	8001358 <__ssputs_r>
 8001476:	3001      	adds	r0, #1
 8001478:	f000 80a4 	beq.w	80015c4 <_svfiprintf_r+0x1b8>
 800147c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800147e:	4453      	add	r3, sl
 8001480:	9309      	str	r3, [sp, #36]	; 0x24
 8001482:	783b      	ldrb	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 809d 	beq.w	80015c4 <_svfiprintf_r+0x1b8>
 800148a:	2300      	movs	r3, #0
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001494:	9304      	str	r3, [sp, #16]
 8001496:	9307      	str	r3, [sp, #28]
 8001498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800149c:	931a      	str	r3, [sp, #104]	; 0x68
 800149e:	462f      	mov	r7, r5
 80014a0:	2205      	movs	r2, #5
 80014a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80014a6:	4850      	ldr	r0, [pc, #320]	; (80015e8 <_svfiprintf_r+0x1dc>)
 80014a8:	f7fe feb2 	bl	8000210 <memchr>
 80014ac:	9b04      	ldr	r3, [sp, #16]
 80014ae:	b9d0      	cbnz	r0, 80014e6 <_svfiprintf_r+0xda>
 80014b0:	06d9      	lsls	r1, r3, #27
 80014b2:	bf44      	itt	mi
 80014b4:	2220      	movmi	r2, #32
 80014b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014ba:	071a      	lsls	r2, r3, #28
 80014bc:	bf44      	itt	mi
 80014be:	222b      	movmi	r2, #43	; 0x2b
 80014c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014c4:	782a      	ldrb	r2, [r5, #0]
 80014c6:	2a2a      	cmp	r2, #42	; 0x2a
 80014c8:	d015      	beq.n	80014f6 <_svfiprintf_r+0xea>
 80014ca:	9a07      	ldr	r2, [sp, #28]
 80014cc:	462f      	mov	r7, r5
 80014ce:	2000      	movs	r0, #0
 80014d0:	250a      	movs	r5, #10
 80014d2:	4639      	mov	r1, r7
 80014d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014d8:	3b30      	subs	r3, #48	; 0x30
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d94d      	bls.n	800157a <_svfiprintf_r+0x16e>
 80014de:	b1b8      	cbz	r0, 8001510 <_svfiprintf_r+0x104>
 80014e0:	e00f      	b.n	8001502 <_svfiprintf_r+0xf6>
 80014e2:	462f      	mov	r7, r5
 80014e4:	e7b8      	b.n	8001458 <_svfiprintf_r+0x4c>
 80014e6:	4a40      	ldr	r2, [pc, #256]	; (80015e8 <_svfiprintf_r+0x1dc>)
 80014e8:	1a80      	subs	r0, r0, r2
 80014ea:	fa0b f000 	lsl.w	r0, fp, r0
 80014ee:	4318      	orrs	r0, r3
 80014f0:	9004      	str	r0, [sp, #16]
 80014f2:	463d      	mov	r5, r7
 80014f4:	e7d3      	b.n	800149e <_svfiprintf_r+0x92>
 80014f6:	9a03      	ldr	r2, [sp, #12]
 80014f8:	1d11      	adds	r1, r2, #4
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	9103      	str	r1, [sp, #12]
 80014fe:	2a00      	cmp	r2, #0
 8001500:	db01      	blt.n	8001506 <_svfiprintf_r+0xfa>
 8001502:	9207      	str	r2, [sp, #28]
 8001504:	e004      	b.n	8001510 <_svfiprintf_r+0x104>
 8001506:	4252      	negs	r2, r2
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	9207      	str	r2, [sp, #28]
 800150e:	9304      	str	r3, [sp, #16]
 8001510:	783b      	ldrb	r3, [r7, #0]
 8001512:	2b2e      	cmp	r3, #46	; 0x2e
 8001514:	d10c      	bne.n	8001530 <_svfiprintf_r+0x124>
 8001516:	787b      	ldrb	r3, [r7, #1]
 8001518:	2b2a      	cmp	r3, #42	; 0x2a
 800151a:	d133      	bne.n	8001584 <_svfiprintf_r+0x178>
 800151c:	9b03      	ldr	r3, [sp, #12]
 800151e:	1d1a      	adds	r2, r3, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	9203      	str	r2, [sp, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfb8      	it	lt
 8001528:	f04f 33ff 	movlt.w	r3, #4294967295
 800152c:	3702      	adds	r7, #2
 800152e:	9305      	str	r3, [sp, #20]
 8001530:	4d2e      	ldr	r5, [pc, #184]	; (80015ec <_svfiprintf_r+0x1e0>)
 8001532:	7839      	ldrb	r1, [r7, #0]
 8001534:	2203      	movs	r2, #3
 8001536:	4628      	mov	r0, r5
 8001538:	f7fe fe6a 	bl	8000210 <memchr>
 800153c:	b138      	cbz	r0, 800154e <_svfiprintf_r+0x142>
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	1b40      	subs	r0, r0, r5
 8001542:	fa03 f000 	lsl.w	r0, r3, r0
 8001546:	9b04      	ldr	r3, [sp, #16]
 8001548:	4303      	orrs	r3, r0
 800154a:	3701      	adds	r7, #1
 800154c:	9304      	str	r3, [sp, #16]
 800154e:	7839      	ldrb	r1, [r7, #0]
 8001550:	4827      	ldr	r0, [pc, #156]	; (80015f0 <_svfiprintf_r+0x1e4>)
 8001552:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001556:	2206      	movs	r2, #6
 8001558:	1c7e      	adds	r6, r7, #1
 800155a:	f7fe fe59 	bl	8000210 <memchr>
 800155e:	2800      	cmp	r0, #0
 8001560:	d038      	beq.n	80015d4 <_svfiprintf_r+0x1c8>
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <_svfiprintf_r+0x1e8>)
 8001564:	bb13      	cbnz	r3, 80015ac <_svfiprintf_r+0x1a0>
 8001566:	9b03      	ldr	r3, [sp, #12]
 8001568:	3307      	adds	r3, #7
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	3308      	adds	r3, #8
 8001570:	9303      	str	r3, [sp, #12]
 8001572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001574:	444b      	add	r3, r9
 8001576:	9309      	str	r3, [sp, #36]	; 0x24
 8001578:	e76d      	b.n	8001456 <_svfiprintf_r+0x4a>
 800157a:	fb05 3202 	mla	r2, r5, r2, r3
 800157e:	2001      	movs	r0, #1
 8001580:	460f      	mov	r7, r1
 8001582:	e7a6      	b.n	80014d2 <_svfiprintf_r+0xc6>
 8001584:	2300      	movs	r3, #0
 8001586:	3701      	adds	r7, #1
 8001588:	9305      	str	r3, [sp, #20]
 800158a:	4619      	mov	r1, r3
 800158c:	250a      	movs	r5, #10
 800158e:	4638      	mov	r0, r7
 8001590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001594:	3a30      	subs	r2, #48	; 0x30
 8001596:	2a09      	cmp	r2, #9
 8001598:	d903      	bls.n	80015a2 <_svfiprintf_r+0x196>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0c8      	beq.n	8001530 <_svfiprintf_r+0x124>
 800159e:	9105      	str	r1, [sp, #20]
 80015a0:	e7c6      	b.n	8001530 <_svfiprintf_r+0x124>
 80015a2:	fb05 2101 	mla	r1, r5, r1, r2
 80015a6:	2301      	movs	r3, #1
 80015a8:	4607      	mov	r7, r0
 80015aa:	e7f0      	b.n	800158e <_svfiprintf_r+0x182>
 80015ac:	ab03      	add	r3, sp, #12
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	4622      	mov	r2, r4
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <_svfiprintf_r+0x1ec>)
 80015b4:	a904      	add	r1, sp, #16
 80015b6:	4640      	mov	r0, r8
 80015b8:	f3af 8000 	nop.w
 80015bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80015c0:	4681      	mov	r9, r0
 80015c2:	d1d6      	bne.n	8001572 <_svfiprintf_r+0x166>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	065b      	lsls	r3, r3, #25
 80015c8:	f53f af35 	bmi.w	8001436 <_svfiprintf_r+0x2a>
 80015cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015ce:	b01d      	add	sp, #116	; 0x74
 80015d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d4:	ab03      	add	r3, sp, #12
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4622      	mov	r2, r4
 80015da:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <_svfiprintf_r+0x1ec>)
 80015dc:	a904      	add	r1, sp, #16
 80015de:	4640      	mov	r0, r8
 80015e0:	f000 f882 	bl	80016e8 <_printf_i>
 80015e4:	e7ea      	b.n	80015bc <_svfiprintf_r+0x1b0>
 80015e6:	bf00      	nop
 80015e8:	08001b5e 	.word	0x08001b5e
 80015ec:	08001b64 	.word	0x08001b64
 80015f0:	08001b68 	.word	0x08001b68
 80015f4:	00000000 	.word	0x00000000
 80015f8:	08001359 	.word	0x08001359

080015fc <_printf_common>:
 80015fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001600:	4691      	mov	r9, r2
 8001602:	461f      	mov	r7, r3
 8001604:	688a      	ldr	r2, [r1, #8]
 8001606:	690b      	ldr	r3, [r1, #16]
 8001608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800160c:	4293      	cmp	r3, r2
 800160e:	bfb8      	it	lt
 8001610:	4613      	movlt	r3, r2
 8001612:	f8c9 3000 	str.w	r3, [r9]
 8001616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800161a:	4606      	mov	r6, r0
 800161c:	460c      	mov	r4, r1
 800161e:	b112      	cbz	r2, 8001626 <_printf_common+0x2a>
 8001620:	3301      	adds	r3, #1
 8001622:	f8c9 3000 	str.w	r3, [r9]
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	0699      	lsls	r1, r3, #26
 800162a:	bf42      	ittt	mi
 800162c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001630:	3302      	addmi	r3, #2
 8001632:	f8c9 3000 	strmi.w	r3, [r9]
 8001636:	6825      	ldr	r5, [r4, #0]
 8001638:	f015 0506 	ands.w	r5, r5, #6
 800163c:	d107      	bne.n	800164e <_printf_common+0x52>
 800163e:	f104 0a19 	add.w	sl, r4, #25
 8001642:	68e3      	ldr	r3, [r4, #12]
 8001644:	f8d9 2000 	ldr.w	r2, [r9]
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	42ab      	cmp	r3, r5
 800164c:	dc28      	bgt.n	80016a0 <_printf_common+0xa4>
 800164e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	3300      	adds	r3, #0
 8001656:	bf18      	it	ne
 8001658:	2301      	movne	r3, #1
 800165a:	0692      	lsls	r2, r2, #26
 800165c:	d42d      	bmi.n	80016ba <_printf_common+0xbe>
 800165e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001662:	4639      	mov	r1, r7
 8001664:	4630      	mov	r0, r6
 8001666:	47c0      	blx	r8
 8001668:	3001      	adds	r0, #1
 800166a:	d020      	beq.n	80016ae <_printf_common+0xb2>
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	68e5      	ldr	r5, [r4, #12]
 8001670:	f8d9 2000 	ldr.w	r2, [r9]
 8001674:	f003 0306 	and.w	r3, r3, #6
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf08      	it	eq
 800167c:	1aad      	subeq	r5, r5, r2
 800167e:	68a3      	ldr	r3, [r4, #8]
 8001680:	6922      	ldr	r2, [r4, #16]
 8001682:	bf0c      	ite	eq
 8001684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001688:	2500      	movne	r5, #0
 800168a:	4293      	cmp	r3, r2
 800168c:	bfc4      	itt	gt
 800168e:	1a9b      	subgt	r3, r3, r2
 8001690:	18ed      	addgt	r5, r5, r3
 8001692:	f04f 0900 	mov.w	r9, #0
 8001696:	341a      	adds	r4, #26
 8001698:	454d      	cmp	r5, r9
 800169a:	d11a      	bne.n	80016d2 <_printf_common+0xd6>
 800169c:	2000      	movs	r0, #0
 800169e:	e008      	b.n	80016b2 <_printf_common+0xb6>
 80016a0:	2301      	movs	r3, #1
 80016a2:	4652      	mov	r2, sl
 80016a4:	4639      	mov	r1, r7
 80016a6:	4630      	mov	r0, r6
 80016a8:	47c0      	blx	r8
 80016aa:	3001      	adds	r0, #1
 80016ac:	d103      	bne.n	80016b6 <_printf_common+0xba>
 80016ae:	f04f 30ff 	mov.w	r0, #4294967295
 80016b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b6:	3501      	adds	r5, #1
 80016b8:	e7c3      	b.n	8001642 <_printf_common+0x46>
 80016ba:	18e1      	adds	r1, r4, r3
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	2030      	movs	r0, #48	; 0x30
 80016c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016c4:	4422      	add	r2, r4
 80016c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016ce:	3302      	adds	r3, #2
 80016d0:	e7c5      	b.n	800165e <_printf_common+0x62>
 80016d2:	2301      	movs	r3, #1
 80016d4:	4622      	mov	r2, r4
 80016d6:	4639      	mov	r1, r7
 80016d8:	4630      	mov	r0, r6
 80016da:	47c0      	blx	r8
 80016dc:	3001      	adds	r0, #1
 80016de:	d0e6      	beq.n	80016ae <_printf_common+0xb2>
 80016e0:	f109 0901 	add.w	r9, r9, #1
 80016e4:	e7d8      	b.n	8001698 <_printf_common+0x9c>
	...

080016e8 <_printf_i>:
 80016e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80016f0:	460c      	mov	r4, r1
 80016f2:	7e09      	ldrb	r1, [r1, #24]
 80016f4:	b085      	sub	sp, #20
 80016f6:	296e      	cmp	r1, #110	; 0x6e
 80016f8:	4617      	mov	r7, r2
 80016fa:	4606      	mov	r6, r0
 80016fc:	4698      	mov	r8, r3
 80016fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001700:	f000 80b3 	beq.w	800186a <_printf_i+0x182>
 8001704:	d822      	bhi.n	800174c <_printf_i+0x64>
 8001706:	2963      	cmp	r1, #99	; 0x63
 8001708:	d036      	beq.n	8001778 <_printf_i+0x90>
 800170a:	d80a      	bhi.n	8001722 <_printf_i+0x3a>
 800170c:	2900      	cmp	r1, #0
 800170e:	f000 80b9 	beq.w	8001884 <_printf_i+0x19c>
 8001712:	2958      	cmp	r1, #88	; 0x58
 8001714:	f000 8083 	beq.w	800181e <_printf_i+0x136>
 8001718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800171c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001720:	e032      	b.n	8001788 <_printf_i+0xa0>
 8001722:	2964      	cmp	r1, #100	; 0x64
 8001724:	d001      	beq.n	800172a <_printf_i+0x42>
 8001726:	2969      	cmp	r1, #105	; 0x69
 8001728:	d1f6      	bne.n	8001718 <_printf_i+0x30>
 800172a:	6820      	ldr	r0, [r4, #0]
 800172c:	6813      	ldr	r3, [r2, #0]
 800172e:	0605      	lsls	r5, r0, #24
 8001730:	f103 0104 	add.w	r1, r3, #4
 8001734:	d52a      	bpl.n	800178c <_printf_i+0xa4>
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6011      	str	r1, [r2, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	da03      	bge.n	8001746 <_printf_i+0x5e>
 800173e:	222d      	movs	r2, #45	; 0x2d
 8001740:	425b      	negs	r3, r3
 8001742:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001746:	486f      	ldr	r0, [pc, #444]	; (8001904 <_printf_i+0x21c>)
 8001748:	220a      	movs	r2, #10
 800174a:	e039      	b.n	80017c0 <_printf_i+0xd8>
 800174c:	2973      	cmp	r1, #115	; 0x73
 800174e:	f000 809d 	beq.w	800188c <_printf_i+0x1a4>
 8001752:	d808      	bhi.n	8001766 <_printf_i+0x7e>
 8001754:	296f      	cmp	r1, #111	; 0x6f
 8001756:	d020      	beq.n	800179a <_printf_i+0xb2>
 8001758:	2970      	cmp	r1, #112	; 0x70
 800175a:	d1dd      	bne.n	8001718 <_printf_i+0x30>
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	f043 0320 	orr.w	r3, r3, #32
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	e003      	b.n	800176e <_printf_i+0x86>
 8001766:	2975      	cmp	r1, #117	; 0x75
 8001768:	d017      	beq.n	800179a <_printf_i+0xb2>
 800176a:	2978      	cmp	r1, #120	; 0x78
 800176c:	d1d4      	bne.n	8001718 <_printf_i+0x30>
 800176e:	2378      	movs	r3, #120	; 0x78
 8001770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001774:	4864      	ldr	r0, [pc, #400]	; (8001908 <_printf_i+0x220>)
 8001776:	e055      	b.n	8001824 <_printf_i+0x13c>
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	1d19      	adds	r1, r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6011      	str	r1, [r2, #0]
 8001780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001788:	2301      	movs	r3, #1
 800178a:	e08c      	b.n	80018a6 <_printf_i+0x1be>
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001794:	bf18      	it	ne
 8001796:	b21b      	sxthne	r3, r3
 8001798:	e7cf      	b.n	800173a <_printf_i+0x52>
 800179a:	6813      	ldr	r3, [r2, #0]
 800179c:	6825      	ldr	r5, [r4, #0]
 800179e:	1d18      	adds	r0, r3, #4
 80017a0:	6010      	str	r0, [r2, #0]
 80017a2:	0628      	lsls	r0, r5, #24
 80017a4:	d501      	bpl.n	80017aa <_printf_i+0xc2>
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	e002      	b.n	80017b0 <_printf_i+0xc8>
 80017aa:	0668      	lsls	r0, r5, #25
 80017ac:	d5fb      	bpl.n	80017a6 <_printf_i+0xbe>
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	4854      	ldr	r0, [pc, #336]	; (8001904 <_printf_i+0x21c>)
 80017b2:	296f      	cmp	r1, #111	; 0x6f
 80017b4:	bf14      	ite	ne
 80017b6:	220a      	movne	r2, #10
 80017b8:	2208      	moveq	r2, #8
 80017ba:	2100      	movs	r1, #0
 80017bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017c0:	6865      	ldr	r5, [r4, #4]
 80017c2:	60a5      	str	r5, [r4, #8]
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	f2c0 8095 	blt.w	80018f4 <_printf_i+0x20c>
 80017ca:	6821      	ldr	r1, [r4, #0]
 80017cc:	f021 0104 	bic.w	r1, r1, #4
 80017d0:	6021      	str	r1, [r4, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d13d      	bne.n	8001852 <_printf_i+0x16a>
 80017d6:	2d00      	cmp	r5, #0
 80017d8:	f040 808e 	bne.w	80018f8 <_printf_i+0x210>
 80017dc:	4665      	mov	r5, ip
 80017de:	2a08      	cmp	r2, #8
 80017e0:	d10b      	bne.n	80017fa <_printf_i+0x112>
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	07db      	lsls	r3, r3, #31
 80017e6:	d508      	bpl.n	80017fa <_printf_i+0x112>
 80017e8:	6923      	ldr	r3, [r4, #16]
 80017ea:	6862      	ldr	r2, [r4, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	bfde      	ittt	le
 80017f0:	2330      	movle	r3, #48	; 0x30
 80017f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80017f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80017fa:	ebac 0305 	sub.w	r3, ip, r5
 80017fe:	6123      	str	r3, [r4, #16]
 8001800:	f8cd 8000 	str.w	r8, [sp]
 8001804:	463b      	mov	r3, r7
 8001806:	aa03      	add	r2, sp, #12
 8001808:	4621      	mov	r1, r4
 800180a:	4630      	mov	r0, r6
 800180c:	f7ff fef6 	bl	80015fc <_printf_common>
 8001810:	3001      	adds	r0, #1
 8001812:	d14d      	bne.n	80018b0 <_printf_i+0x1c8>
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	b005      	add	sp, #20
 800181a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800181e:	4839      	ldr	r0, [pc, #228]	; (8001904 <_printf_i+0x21c>)
 8001820:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	6821      	ldr	r1, [r4, #0]
 8001828:	1d1d      	adds	r5, r3, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6015      	str	r5, [r2, #0]
 800182e:	060a      	lsls	r2, r1, #24
 8001830:	d50b      	bpl.n	800184a <_printf_i+0x162>
 8001832:	07ca      	lsls	r2, r1, #31
 8001834:	bf44      	itt	mi
 8001836:	f041 0120 	orrmi.w	r1, r1, #32
 800183a:	6021      	strmi	r1, [r4, #0]
 800183c:	b91b      	cbnz	r3, 8001846 <_printf_i+0x15e>
 800183e:	6822      	ldr	r2, [r4, #0]
 8001840:	f022 0220 	bic.w	r2, r2, #32
 8001844:	6022      	str	r2, [r4, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	e7b7      	b.n	80017ba <_printf_i+0xd2>
 800184a:	064d      	lsls	r5, r1, #25
 800184c:	bf48      	it	mi
 800184e:	b29b      	uxthmi	r3, r3
 8001850:	e7ef      	b.n	8001832 <_printf_i+0x14a>
 8001852:	4665      	mov	r5, ip
 8001854:	fbb3 f1f2 	udiv	r1, r3, r2
 8001858:	fb02 3311 	mls	r3, r2, r1, r3
 800185c:	5cc3      	ldrb	r3, [r0, r3]
 800185e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001862:	460b      	mov	r3, r1
 8001864:	2900      	cmp	r1, #0
 8001866:	d1f5      	bne.n	8001854 <_printf_i+0x16c>
 8001868:	e7b9      	b.n	80017de <_printf_i+0xf6>
 800186a:	6813      	ldr	r3, [r2, #0]
 800186c:	6825      	ldr	r5, [r4, #0]
 800186e:	6961      	ldr	r1, [r4, #20]
 8001870:	1d18      	adds	r0, r3, #4
 8001872:	6010      	str	r0, [r2, #0]
 8001874:	0628      	lsls	r0, r5, #24
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	d501      	bpl.n	800187e <_printf_i+0x196>
 800187a:	6019      	str	r1, [r3, #0]
 800187c:	e002      	b.n	8001884 <_printf_i+0x19c>
 800187e:	066a      	lsls	r2, r5, #25
 8001880:	d5fb      	bpl.n	800187a <_printf_i+0x192>
 8001882:	8019      	strh	r1, [r3, #0]
 8001884:	2300      	movs	r3, #0
 8001886:	6123      	str	r3, [r4, #16]
 8001888:	4665      	mov	r5, ip
 800188a:	e7b9      	b.n	8001800 <_printf_i+0x118>
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	1d19      	adds	r1, r3, #4
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	681d      	ldr	r5, [r3, #0]
 8001894:	6862      	ldr	r2, [r4, #4]
 8001896:	2100      	movs	r1, #0
 8001898:	4628      	mov	r0, r5
 800189a:	f7fe fcb9 	bl	8000210 <memchr>
 800189e:	b108      	cbz	r0, 80018a4 <_printf_i+0x1bc>
 80018a0:	1b40      	subs	r0, r0, r5
 80018a2:	6060      	str	r0, [r4, #4]
 80018a4:	6863      	ldr	r3, [r4, #4]
 80018a6:	6123      	str	r3, [r4, #16]
 80018a8:	2300      	movs	r3, #0
 80018aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018ae:	e7a7      	b.n	8001800 <_printf_i+0x118>
 80018b0:	6923      	ldr	r3, [r4, #16]
 80018b2:	462a      	mov	r2, r5
 80018b4:	4639      	mov	r1, r7
 80018b6:	4630      	mov	r0, r6
 80018b8:	47c0      	blx	r8
 80018ba:	3001      	adds	r0, #1
 80018bc:	d0aa      	beq.n	8001814 <_printf_i+0x12c>
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	079b      	lsls	r3, r3, #30
 80018c2:	d413      	bmi.n	80018ec <_printf_i+0x204>
 80018c4:	68e0      	ldr	r0, [r4, #12]
 80018c6:	9b03      	ldr	r3, [sp, #12]
 80018c8:	4298      	cmp	r0, r3
 80018ca:	bfb8      	it	lt
 80018cc:	4618      	movlt	r0, r3
 80018ce:	e7a3      	b.n	8001818 <_printf_i+0x130>
 80018d0:	2301      	movs	r3, #1
 80018d2:	464a      	mov	r2, r9
 80018d4:	4639      	mov	r1, r7
 80018d6:	4630      	mov	r0, r6
 80018d8:	47c0      	blx	r8
 80018da:	3001      	adds	r0, #1
 80018dc:	d09a      	beq.n	8001814 <_printf_i+0x12c>
 80018de:	3501      	adds	r5, #1
 80018e0:	68e3      	ldr	r3, [r4, #12]
 80018e2:	9a03      	ldr	r2, [sp, #12]
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	42ab      	cmp	r3, r5
 80018e8:	dcf2      	bgt.n	80018d0 <_printf_i+0x1e8>
 80018ea:	e7eb      	b.n	80018c4 <_printf_i+0x1dc>
 80018ec:	2500      	movs	r5, #0
 80018ee:	f104 0919 	add.w	r9, r4, #25
 80018f2:	e7f5      	b.n	80018e0 <_printf_i+0x1f8>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ac      	bne.n	8001852 <_printf_i+0x16a>
 80018f8:	7803      	ldrb	r3, [r0, #0]
 80018fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001902:	e76c      	b.n	80017de <_printf_i+0xf6>
 8001904:	08001b6f 	.word	0x08001b6f
 8001908:	08001b80 	.word	0x08001b80

0800190c <memcpy>:
 800190c:	b510      	push	{r4, lr}
 800190e:	1e43      	subs	r3, r0, #1
 8001910:	440a      	add	r2, r1
 8001912:	4291      	cmp	r1, r2
 8001914:	d100      	bne.n	8001918 <memcpy+0xc>
 8001916:	bd10      	pop	{r4, pc}
 8001918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800191c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001920:	e7f7      	b.n	8001912 <memcpy+0x6>

08001922 <memmove>:
 8001922:	4288      	cmp	r0, r1
 8001924:	b510      	push	{r4, lr}
 8001926:	eb01 0302 	add.w	r3, r1, r2
 800192a:	d807      	bhi.n	800193c <memmove+0x1a>
 800192c:	1e42      	subs	r2, r0, #1
 800192e:	4299      	cmp	r1, r3
 8001930:	d00a      	beq.n	8001948 <memmove+0x26>
 8001932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001936:	f802 4f01 	strb.w	r4, [r2, #1]!
 800193a:	e7f8      	b.n	800192e <memmove+0xc>
 800193c:	4283      	cmp	r3, r0
 800193e:	d9f5      	bls.n	800192c <memmove+0xa>
 8001940:	1881      	adds	r1, r0, r2
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	42d3      	cmn	r3, r2
 8001946:	d100      	bne.n	800194a <memmove+0x28>
 8001948:	bd10      	pop	{r4, pc}
 800194a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800194e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001952:	e7f7      	b.n	8001944 <memmove+0x22>

08001954 <_free_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4605      	mov	r5, r0
 8001958:	2900      	cmp	r1, #0
 800195a:	d045      	beq.n	80019e8 <_free_r+0x94>
 800195c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001960:	1f0c      	subs	r4, r1, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	bfb8      	it	lt
 8001966:	18e4      	addlt	r4, r4, r3
 8001968:	f000 f8d2 	bl	8001b10 <__malloc_lock>
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <_free_r+0x98>)
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	4610      	mov	r0, r2
 8001972:	b933      	cbnz	r3, 8001982 <_free_r+0x2e>
 8001974:	6063      	str	r3, [r4, #4]
 8001976:	6014      	str	r4, [r2, #0]
 8001978:	4628      	mov	r0, r5
 800197a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800197e:	f000 b8c8 	b.w	8001b12 <__malloc_unlock>
 8001982:	42a3      	cmp	r3, r4
 8001984:	d90c      	bls.n	80019a0 <_free_r+0x4c>
 8001986:	6821      	ldr	r1, [r4, #0]
 8001988:	1862      	adds	r2, r4, r1
 800198a:	4293      	cmp	r3, r2
 800198c:	bf04      	itt	eq
 800198e:	681a      	ldreq	r2, [r3, #0]
 8001990:	685b      	ldreq	r3, [r3, #4]
 8001992:	6063      	str	r3, [r4, #4]
 8001994:	bf04      	itt	eq
 8001996:	1852      	addeq	r2, r2, r1
 8001998:	6022      	streq	r2, [r4, #0]
 800199a:	6004      	str	r4, [r0, #0]
 800199c:	e7ec      	b.n	8001978 <_free_r+0x24>
 800199e:	4613      	mov	r3, r2
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	b10a      	cbz	r2, 80019a8 <_free_r+0x54>
 80019a4:	42a2      	cmp	r2, r4
 80019a6:	d9fa      	bls.n	800199e <_free_r+0x4a>
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	1858      	adds	r0, r3, r1
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	d10b      	bne.n	80019c8 <_free_r+0x74>
 80019b0:	6820      	ldr	r0, [r4, #0]
 80019b2:	4401      	add	r1, r0
 80019b4:	1858      	adds	r0, r3, r1
 80019b6:	4282      	cmp	r2, r0
 80019b8:	6019      	str	r1, [r3, #0]
 80019ba:	d1dd      	bne.n	8001978 <_free_r+0x24>
 80019bc:	6810      	ldr	r0, [r2, #0]
 80019be:	6852      	ldr	r2, [r2, #4]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	4401      	add	r1, r0
 80019c4:	6019      	str	r1, [r3, #0]
 80019c6:	e7d7      	b.n	8001978 <_free_r+0x24>
 80019c8:	d902      	bls.n	80019d0 <_free_r+0x7c>
 80019ca:	230c      	movs	r3, #12
 80019cc:	602b      	str	r3, [r5, #0]
 80019ce:	e7d3      	b.n	8001978 <_free_r+0x24>
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	1821      	adds	r1, r4, r0
 80019d4:	428a      	cmp	r2, r1
 80019d6:	bf04      	itt	eq
 80019d8:	6811      	ldreq	r1, [r2, #0]
 80019da:	6852      	ldreq	r2, [r2, #4]
 80019dc:	6062      	str	r2, [r4, #4]
 80019de:	bf04      	itt	eq
 80019e0:	1809      	addeq	r1, r1, r0
 80019e2:	6021      	streq	r1, [r4, #0]
 80019e4:	605c      	str	r4, [r3, #4]
 80019e6:	e7c7      	b.n	8001978 <_free_r+0x24>
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	20000090 	.word	0x20000090

080019f0 <_malloc_r>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	1ccd      	adds	r5, r1, #3
 80019f4:	f025 0503 	bic.w	r5, r5, #3
 80019f8:	3508      	adds	r5, #8
 80019fa:	2d0c      	cmp	r5, #12
 80019fc:	bf38      	it	cc
 80019fe:	250c      	movcc	r5, #12
 8001a00:	2d00      	cmp	r5, #0
 8001a02:	4606      	mov	r6, r0
 8001a04:	db01      	blt.n	8001a0a <_malloc_r+0x1a>
 8001a06:	42a9      	cmp	r1, r5
 8001a08:	d903      	bls.n	8001a12 <_malloc_r+0x22>
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	6033      	str	r3, [r6, #0]
 8001a0e:	2000      	movs	r0, #0
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	f000 f87d 	bl	8001b10 <__malloc_lock>
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <_malloc_r+0xac>)
 8001a18:	6814      	ldr	r4, [r2, #0]
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	b991      	cbnz	r1, 8001a44 <_malloc_r+0x54>
 8001a1e:	4c20      	ldr	r4, [pc, #128]	; (8001aa0 <_malloc_r+0xb0>)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	b91b      	cbnz	r3, 8001a2c <_malloc_r+0x3c>
 8001a24:	4630      	mov	r0, r6
 8001a26:	f000 f863 	bl	8001af0 <_sbrk_r>
 8001a2a:	6020      	str	r0, [r4, #0]
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f000 f85e 	bl	8001af0 <_sbrk_r>
 8001a34:	1c43      	adds	r3, r0, #1
 8001a36:	d124      	bne.n	8001a82 <_malloc_r+0x92>
 8001a38:	230c      	movs	r3, #12
 8001a3a:	6033      	str	r3, [r6, #0]
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f000 f868 	bl	8001b12 <__malloc_unlock>
 8001a42:	e7e4      	b.n	8001a0e <_malloc_r+0x1e>
 8001a44:	680b      	ldr	r3, [r1, #0]
 8001a46:	1b5b      	subs	r3, r3, r5
 8001a48:	d418      	bmi.n	8001a7c <_malloc_r+0x8c>
 8001a4a:	2b0b      	cmp	r3, #11
 8001a4c:	d90f      	bls.n	8001a6e <_malloc_r+0x7e>
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	50cd      	str	r5, [r1, r3]
 8001a52:	18cc      	adds	r4, r1, r3
 8001a54:	4630      	mov	r0, r6
 8001a56:	f000 f85c 	bl	8001b12 <__malloc_unlock>
 8001a5a:	f104 000b 	add.w	r0, r4, #11
 8001a5e:	1d23      	adds	r3, r4, #4
 8001a60:	f020 0007 	bic.w	r0, r0, #7
 8001a64:	1ac3      	subs	r3, r0, r3
 8001a66:	d0d3      	beq.n	8001a10 <_malloc_r+0x20>
 8001a68:	425a      	negs	r2, r3
 8001a6a:	50e2      	str	r2, [r4, r3]
 8001a6c:	e7d0      	b.n	8001a10 <_malloc_r+0x20>
 8001a6e:	428c      	cmp	r4, r1
 8001a70:	684b      	ldr	r3, [r1, #4]
 8001a72:	bf16      	itet	ne
 8001a74:	6063      	strne	r3, [r4, #4]
 8001a76:	6013      	streq	r3, [r2, #0]
 8001a78:	460c      	movne	r4, r1
 8001a7a:	e7eb      	b.n	8001a54 <_malloc_r+0x64>
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	6849      	ldr	r1, [r1, #4]
 8001a80:	e7cc      	b.n	8001a1c <_malloc_r+0x2c>
 8001a82:	1cc4      	adds	r4, r0, #3
 8001a84:	f024 0403 	bic.w	r4, r4, #3
 8001a88:	42a0      	cmp	r0, r4
 8001a8a:	d005      	beq.n	8001a98 <_malloc_r+0xa8>
 8001a8c:	1a21      	subs	r1, r4, r0
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f000 f82e 	bl	8001af0 <_sbrk_r>
 8001a94:	3001      	adds	r0, #1
 8001a96:	d0cf      	beq.n	8001a38 <_malloc_r+0x48>
 8001a98:	6025      	str	r5, [r4, #0]
 8001a9a:	e7db      	b.n	8001a54 <_malloc_r+0x64>
 8001a9c:	20000090 	.word	0x20000090
 8001aa0:	20000094 	.word	0x20000094

08001aa4 <_realloc_r>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	4607      	mov	r7, r0
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	460e      	mov	r6, r1
 8001aac:	b921      	cbnz	r1, 8001ab8 <_realloc_r+0x14>
 8001aae:	4611      	mov	r1, r2
 8001ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ab4:	f7ff bf9c 	b.w	80019f0 <_malloc_r>
 8001ab8:	b922      	cbnz	r2, 8001ac4 <_realloc_r+0x20>
 8001aba:	f7ff ff4b 	bl	8001954 <_free_r>
 8001abe:	4625      	mov	r5, r4
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac4:	f000 f826 	bl	8001b14 <_malloc_usable_size_r>
 8001ac8:	42a0      	cmp	r0, r4
 8001aca:	d20f      	bcs.n	8001aec <_realloc_r+0x48>
 8001acc:	4621      	mov	r1, r4
 8001ace:	4638      	mov	r0, r7
 8001ad0:	f7ff ff8e 	bl	80019f0 <_malloc_r>
 8001ad4:	4605      	mov	r5, r0
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d0f2      	beq.n	8001ac0 <_realloc_r+0x1c>
 8001ada:	4631      	mov	r1, r6
 8001adc:	4622      	mov	r2, r4
 8001ade:	f7ff ff15 	bl	800190c <memcpy>
 8001ae2:	4631      	mov	r1, r6
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	f7ff ff35 	bl	8001954 <_free_r>
 8001aea:	e7e9      	b.n	8001ac0 <_realloc_r+0x1c>
 8001aec:	4635      	mov	r5, r6
 8001aee:	e7e7      	b.n	8001ac0 <_realloc_r+0x1c>

08001af0 <_sbrk_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4c06      	ldr	r4, [pc, #24]	; (8001b0c <_sbrk_r+0x1c>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	4605      	mov	r5, r0
 8001af8:	4608      	mov	r0, r1
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	f7fe fd1a 	bl	8000534 <_sbrk>
 8001b00:	1c43      	adds	r3, r0, #1
 8001b02:	d102      	bne.n	8001b0a <_sbrk_r+0x1a>
 8001b04:	6823      	ldr	r3, [r4, #0]
 8001b06:	b103      	cbz	r3, 8001b0a <_sbrk_r+0x1a>
 8001b08:	602b      	str	r3, [r5, #0]
 8001b0a:	bd38      	pop	{r3, r4, r5, pc}
 8001b0c:	20000108 	.word	0x20000108

08001b10 <__malloc_lock>:
 8001b10:	4770      	bx	lr

08001b12 <__malloc_unlock>:
 8001b12:	4770      	bx	lr

08001b14 <_malloc_usable_size_r>:
 8001b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b18:	1f18      	subs	r0, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bfbc      	itt	lt
 8001b1e:	580b      	ldrlt	r3, [r1, r0]
 8001b20:	18c0      	addlt	r0, r0, r3
 8001b22:	4770      	bx	lr

08001b24 <_init>:
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	bf00      	nop
 8001b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2a:	bc08      	pop	{r3}
 8001b2c:	469e      	mov	lr, r3
 8001b2e:	4770      	bx	lr

08001b30 <_fini>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	bf00      	nop
 8001b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b36:	bc08      	pop	{r3}
 8001b38:	469e      	mov	lr, r3
 8001b3a:	4770      	bx	lr
